# Copyright 2025 The Authors (see AUTHORS file)
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

name: 'Self-Hosted Smoke Tests'

on:
  workflow_dispatch:
  workflow_run:
    # Run this workflow after either of the other build/deploys run.
    workflows:
      - 'build_runner.yml'
      - 'build_webhook.yml'
    types:
      - 'completed'
    branches:
      - 'main'

jobs:
  test-github-script-action:
    runs-on: 'self-hosted'
    steps:
      - name: 'Hello world script'
        uses: 'actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea' # ratchet:actions/github-script@v7
        with:
          script: |-
            core.info("Hello World");

  test-js-action:
    runs-on: 'self-hosted'
    steps:
      - name: 'Run action'
        uses: 'actions/hello-world-javascript-action@ad41a6c27317e688719c813b0d6a25685a9bce54' # ratchet:actions/hello-world-javascript-action@v1.1
        with:
          who-to-greet: 'self hosted runner users'

  check-docker-volume-mount:
    # This test is to check Docker-in-Docker volume mounting. It's possible that the docker run command will succeed but not properly mount the files and workflows subsequently fail.
    name: 'Verify Docker-in-Docker volume mounts on the self-hosted runner'
    runs-on: 'self-hosted'
    steps:
      - name: 'Checkout Repository'
        uses: 'actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683' # ratchet:actions/checkout@v4

      - name: 'Test GITHUB_WORKSPACE mount inside Docker'

        id: 'mount-check'
        shell: 'bash'
        run: |
          echo "Host GITHUB_WORKSPACE is: $GITHUB_WORKSPACE"
          echo "Contents of GITHUB_WORKSPACE on host:"
          ls -laR "$GITHUB_WORKSPACE"


          echo "Running Docker container to check mounted workspace..."
          docker run --rm \
            -v "$GITHUB_WORKSPACE:/github/workspace" \
            -w "/github/workspace" \
            alpine sh -c "ls -laR" > docker_ls_output.txt

          echo "--- Output from inside container (docker_ls_output.txt) ---"
          cat docker_ls_output.txt
          echo "---------------------------------------------------------"

          if grep -q "terraform" docker_ls_output.txt; then
            echo "::notice file=check-docker-volume-mount.yml::Docker volume mount appears to be working correctly."
            echo "status=PASSED" >> "$GITHUB_OUTPUT"
          else
            echo "::error file=check-docker-volume-mount.yml::Docker volume mount failed or is empty."
            echo "status=FAILED" >> "$GITHUB_OUTPUT"
            exit 1 # Fail the step if the mount is empty
          fi

  check-go-test-self:
    uses: 'abcxyz/actions/.github/workflows/go-test.yml@main' # ratchet:exclude
    with:
      directory: 'pkg/'
      runs-on: 'self-hosted'

  run-lint-tests-pkg:
    name: 'Run Lint Suite on abcxyz/pkg'
    uses: './.github/workflows/integration-test-lint.yml'
    with:
      repo-to-lint: 'abcxyz/pkg'
      ref: 'main'
      runs-on: 'self-hosted'

  run-lint-tests-java-repo:
    name: 'Run Lint Suite on abcxyz/lumberjack to test a repo with java'
    uses: './.github/workflows/integration-test-lint.yml'
    with:
      repo-to-lint: 'abcxyz/lumberjack'
      ref: 'main'
      runs-on: 'self-hosted'

  test-github-functionality:
    name: 'Test GitHub functionality'
    runs-on: 'self-hosted'
    uses: './.github/workflows/integration-test-gh.yaml'
    with:
      runs-on: 'self-hosted'

  setup-actions:
    runs-on: 'self-hosted'
    steps:
      - name: 'setup-python'
        uses: 'actions/setup-python@a26af69be951a213d495a4c3e4e4022e16d87065' # ratchet:actions/setup-python@v5
        with:
          python-version: '3.12'
      - name: 'verify-python'
        run: |
          python3 <<'EOF'
          import platform
          version = platform.python_version().split('.')
          if version[0] != '3' or version[1] != '12':
            exit(1)
          EOF

      - name: 'setup-gcloud'
        uses: 'google-github-actions/setup-gcloud@6189d56e4096ee891640bb02ac264be376592d6a' # ratchet:google-github-actions/setup-gcloud@v2/

      - name: 'verify-gcloud'
        run: 'gcloud -h'

      - name: 'setup-node'
        uses: 'actions/setup-node@49933ea5288caeca8642d1e84afbd3f7d6820020' # ratchet:actions/setup-node@v4
        with:
          node-version: '20.x'

      - name: 'verify-node'
        run: |
          node <<'EOF'
          const major = process.versions.node.split(".").map(Number)[0]
          if (major !== 20) {
            process.exit(1)
          }
          EOF

      - name: 'setup-java'
        uses: 'actions/setup-java@c5195efecf7bdfc987ee8bae7a71cb8b11521c00' # ratchet:actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '24'

      - name: 'verify-java'
        run: |
          cat <<'EOF' > Test.java
          void main() {
           if (Runtime.version().feature() != 24) {
             System.exit(1);
           }
          }
          EOF
          java --enable-preview Test.java

      - name: 'setup-go'
        uses: 'actions/setup-go@d35c59abb061a4a6fb18e82ac0862c26744d6ab5' # ratchet:actions/setup-go@v5
        with:
          go-version: '1.24.5'

      - name: 'verify-go'
        run: |
          cat <<'EOF' > test.go
          package main
          import "runtime"
          func main() {
            if runtime.Version() != "go1.24.5" {
              panic("wrong version")
            }
          }
          EOF
          go run test.go

      - name: 'setup-dotnet'
        uses: 'actions/setup-dotnet@67a3573c9a986a3f9c594539f4ab511d57bb3ce9' # ratchet:actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'

      - name: 'verify-dotnet'
        run: |
          dotnet tool install --global dotnet-script --version 1.6.0
          cat <<'EOF' > test.csx
          var version = Environment.Version;
          if (version.Major != 8 || version.Minor != 0)
          {
            throw new Exception($"Want .NET 8.0.x, got {version}");
          }
          EOF
          dotnet-script test.csx

